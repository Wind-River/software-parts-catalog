# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Upload
scalar Int64
scalar Time
scalar UUID
scalar JSON

# Archive contains identifying info and the relationship to its part if it's been successfully extracted
type Archive {
  sha256: String!
  size: Int64
  part_id: UUID
  # part requests the part this archive contained
  part: Part
  md5: String
  sha1: String
  name: String
  insert_date: Time!
}

# Part represents a software part
type Part {
  id: UUID!
  type: String!
  name: String
  version: String
  label: String
  family_name: String
  file_verification_code: String
  size: Int64
  license: String
  license_rationale: String
  description: String
  # comprised is the ID of another part that builds this part
  comprised: UUID
  # aliases requests the list of aliases for this part
  aliases: [String!]
  # profiles requests the list of profiles for this part
  profiles: [Profile!]
  # sub_parts requests the list of other parts this part contains
  sub_parts: [SubPart!]
}

type Profile {
  key: String!
  documents: [Document!]!
}

type Document {
  title: String
  document: JSON!
}

type Query {
  # archive returns the archive matching the given sha256 exactly, or matching the given name exactly if sha256 was not given or found
  archive(sha256: String, name: String): Archive
  # find_archive searches the database for archives with names like the given query
  find_archive(query: String!, method: String, costs: SearchCosts): [ArchiveDistance!]!
  # part returns the part matching the first matching not nil identifying info 
  part(id: UUID, file_verification_code: String, sha256: String, sha1: String, name: String): Part
  # archives list archives pointing to the part identified by part_id or verification code
  archives(id: UUID, vcode: String): [Archive!]!
  # partlist returns the PartList by id, or if not given, by name
  partlist(id: Int64, name: String): PartList
  # partlist_parts lists the Parts contained by a partlist
  partlist_parts(id: Int64!): [Part]!
  # partlists returns the list of other partlists this one contains
  # if parent_id is 0, returns every root partlist
  partlists(parent_id: Int64!): [PartList]!
  # file_count returns the number of files owned by the given part and its sub-parts
  file_count(id: UUID, vcode: String): Int64!
  # comprised returns the list of parts that are comprised by the given part
  # see Part.comprised if you are looking for what comprises a given part
  comprised(id: UUID): [Part!]!
  # profile returns a list of both document types, with an optional title field
  profile(id: UUID, key: String): [Document!]
}

type Mutation {
  # addPartList creates a new part list with the given parent, or a root part if no parent given
  addPartList(name: String!, parent_id: Int64): PartList!
  # deletPartList deletes the given empty part list
  deletePartList(id: Int64!): PartList!
  # deletePartFromList removes the given part from the given list
  deletePartFromList(list_id: Int64!, part_id: UUID!): PartList!
  # Upload an archive to be processed into a part
  uploadArchive(file: Upload!, name: String): UploadedArchive!
  # Updates the part associated with the given archive
  # An error will be returned if the associated part hasn't been created yet
  updateArchive(sha256: String!, license: String, licenseRationale: String, familyString: String): Archive
  # updatePartLists adds a list of parts to the given part
  updatePartList(id: Int64!, name: String, parts: [UUID]): PartList!
  # Update the given part with non-nil and non-zero fields
  updatePart(partInput: PartInput): Part
  # Create a part alias
  createAlias(id: UUID!, alias: String!): UUID!
  # Attach a document to a part
  # If title is not given, it is a part_has_document, else it is a part_documents entry
  attachDocument(id: UUID!, key: String!, title: String, document: JSON!): Boolean!
  # Adds a sub-part to a part at a path
  partHasPart(parent: UUID!, child: UUID!, path: String!): Boolean!
  # Adds a file to a part, potentially at a path
  partHasFile(id: UUID!, file_sha256: String!, path: String): Boolean!
  # Create a new part with the given input
  createPart(partInput: NewPartInput!): Part!
  # Delete the given part
  # Currently will automatically delete all relations required to achieve this
  deletePart(part_id: UUID!): Boolean!
}


# PartInput contains the editable fields of the Part type
input PartInput {
  id: UUID! # Required to identify which Part you are trying to edit
  type: String
  name: String
  version: String
  label: String
  family_name: String
  file_verification_code: String
  license: String
  license_rationale: String
  description: String
  comprised: UUID
}

# NewPartInput contains the fields you can set on a new part
input NewPartInput {
  type: String
  name: String
  version: String
  label: String
  family_name: String
  license: String
  license_rationale: String
  description: String
  comprised: UUID
}

# SearchCosts contains the variables we can change for the levenshtein or levensthein_less_equal string comparions.
# These values represent costs for edit operations to try to make one string match another.
# max_distance will cut off the calculation early if it is clear the cost exceeds the given cost.
# The defaults are optimized for a user entering a portion of the archive's name that they are searching for.
# A low delete cost means the cost to delete characters from the full name in the database to match the shorter text the user has entered is lower.
input SearchCosts {
  insert: Int! # Default 20
  delete: Int! # Default 2
  substitute: Int! # Default 30
  max_distance: Int # Default 75; if set to -1 makes levenshtein_less_equal act like levenshtein
}

# ArchiveDistance is a tuple containing an archive, and it's distance from a search term.
# ArchiveDistance is a tuple containing an archive, and it's distance from a search term.
type ArchiveDistance {
  distance: Int64!
  archive: Archive!
}

# SubPart is a tuple containing a part, and it's path within a parent part
# SubPart is a tuple containing a part, and it's path within a parent part
type SubPart {
  path: String!
  part: Part!
}

# TODO replace UploadedArchive with just Archive
# Extract status is already not being set properly by the server, and can be inferred by the existence of a part
type UploadedArchive {
  extracted: Boolean! @deprecated
  archive: Archive
}

type PartList {
  id: Int64!
  name: String!
  parent_id: Int64
}